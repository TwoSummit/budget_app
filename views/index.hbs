<div class="alert alert-warning alert-dismissible fade show" role="alert">
  <button type="button" class="close" data-dismiss="alert" aria-label="Close">
    <span aria-hidden="true">&times;</span>
  </button>
  <strong>Some kind of alert box.</strong> 
</div>

<form class="form mt-3" onsubmit="return false;">

    <div class="form-group row">
        <label for="budgetAmount" class="col-sm-2 col-form-label">Amount</label>
        <div class="col-sm-10">
            <input type="text" class="form-control" id="budgetAmount" placeholder="$0.00">
        </div>
    </div>

    <div class="form-group row">
        <label for="budgetDate" class="col-sm-2 col-form-label">Date</label>
        <div class="col-sm-10">
            <input type="date" class="form-control" id="budgetDate">
        </div>
    </div>

    <fieldset class="form-group row">
        <legend class="col-form-legend col-sm-2">Repeats...</legend>
        <div class="col-sm-10">
            <div class="form-check">
                <label class="form-check-label">
                    <input class="form-check-input" type="radio" name="budgetRepeats" id="budgetRepeats0" value="0" checked>
                    Never
                </label>
            </div>
            <div class="form-check">
                <label class="form-check-label">
                    <input class="form-check-input" type="radio" name="budgetRepeats" id="budgetRepeats1" value="1">
                    Monthly
                </label>
            </div>
            <div class="form-check">
                <label class="form-check-label">
                    <input class="form-check-input" type="radio" name="budgetRepeats" id="budgetRepeats6" value="6">
                    6-Monthly
                </label>
            </div>
            <div class="form-check disabled">
                <label class="form-check-label">
                    <input class="form-check-input" type="radio" name="budgetRepeats" id="budgetRepeats12" value="12">
                    12-Monthly
                </label>
            </div>
        </div>
    </fieldset>

    <div class="page-header">
        <h2>Budgets</h2>
    </div>

    <div class="form-group row">
        <div class="col-sm-12">
            <button type="button" class="btn btn-primary" id="budgetAdd">Add Budget</button>
            <button type="button" class="btn btn-primary" id="budgetClear">Clear Table</button>
        </div>
    </div>
</form>

<table id="budgetEntries" class="table table-striped table-dark">
    <thead>
        <tr>
            <th scope="col">Day</th>
            <th scope="col">Amount</th>
            <th scope="col">Repeats</th>
            <th scope="col">Edit</th>
            <th scope="col">Delete</th>
        </tr>
    </thead>
    <tbody>
    </tbody>
</table>
<!-- 
<nav aria-label="Page navigation example">
    <ul class="pagination">
        <li class="page-item"><a class="page-link" href="#">Previous</a></li>
        <li class="page-item"><a class="page-link" href="#">1</a></li>
        <li class="page-item"><a class="page-link" href="#">2</a></li>
        <li class="page-item"><a class="page-link" href="#">3</a></li>
        <li class="page-item"><a class="page-link" href="#">Next</a></li>
    </ul>
</nav>
-->

<div class="page-header">
    <h2>Forecasting</h2>
</div>

<table id="budgetEntries" class="table table-striped table-dark">
    <thead>
        <tr>
            <th scope="col">Day</th>
            <th scope="col">Amount</th>
        </tr>
    </thead>
    <tbody>
    </tbody>
</table>

<script>
    var debug = true;

    var budgetsData = {{{budgets}}};
    for( var budget = 0; budget < budgetsData.length; budget++){
        budgetsData[budget].date = createConsistantDate(budgetsData[budget].date);
    }

    var numBudgetEntries = 0;
    // HTML Templates
    var budgetEditDeleteTemplate = 
        `<td>
            <p data-placement="top" data-toggle="tooltip" title="Edit">
                <button class="btn btn-primary btn-xs" data-title="Edit" data-toggle="modal" data-target="#edit">
                    <span class="glyphicon glyphicon-pencil"></span>
                </button>
            </p>
        </td>
        <td>
            <p data-placement="top" data-toggle="tooltip" title="Delete">
                <button class="btn btn-danger btn-xs" data-title="Delete" data-toggle="modal" data-target="#delete">
                    <span class="glyphicon glyphicon-trash"></span>
                </button>
            </p>
        </td>`;

    $(document).ready( function(){
        var budgets = budgetsData;
        initBudgetsTableFromFile(budgets);
        forecastData(budgets, 12, 1);
    });
    
    $('input').focus(function () {
        this.select();
    });

    $('#budgetClear').click(function () {
        clearBudgetsTable();
    });

    $('#budgetAdd').click(function () {
        addBudget();
    });
    
    /**
    * Create a consistant date output format.
    * 
    * This was created to solve a problem of inconsistant date
    * formats being passed around. It should allow for a more
    * consistant way of calculating dates.
    *
    * @param {string} yearMonthDay String of year-month-date
    *
    * @return {Date} Date to use in calculations.
    */
    function createConsistantDate(yearMonthDay){
        var dateComponents = yearMonthDay.split("-");
        var year = dateComponents[0];
        var month = dateComponents[1];
        var day = dateComponents[2];
        var date = new Date(year, month, day, 0, 0, 0, 0);
        return date;
    }

    /**
    * Clear out the table and fill in data from file.
    * 
    * clearBudgetsTable to insure nothing in the table.
    * Fill in the table using data coming in from hbs data.
    *
    * @param {array} budgetsData JSON data for budgets
    *
    * @return {void}
    */
    function initBudgetsTableFromFile(budgetsData) {
        var dataLength = budgetsData.length;
        clearBudgetsTable();

        for(var entry = 0; entry < dataLength; entry++){
            var rowId = budgetsData[entry].id;
            var entryAmount = budgetsData[entry].amount;
            var entryDay = budgetsData[entry].date;
            var entryRepeats = budgetsData[entry].repeats;

            appendBudgetLineToTable(rowId, entryAmount, entryDay, entryRepeats);
        }
    }

    function appendBudgetLineToTable(id, amount, date, repeats){
        var budgetEntriesTable =  $('#budgetEntries tr:last');
        budgetEntriesTable.after(
            '<tr>' +
                '<td>' + 
                    date.getDate() +
                '</td>' + 
                '<td>$' + 
                    amount +
                '</td>' + 
                '<td>' + 
                    repeats +
                '</td>' + 
                budgetEditDeleteTemplate +
            '</tr>');

        if(debug){
            console.dir("Row added.");
        }
    }

    function clearBudgetsTable(){
        var budgetEntriesTable =  $('#budgetEntries');
        budgetEntriesTable.find("tr:gt(0)").remove();
        
        if(debug){
            console.dir("Table cleared.");
        }
    }

    function addBudget(){
        var formFields = getFormFields();

        // Get value(s) from fields
        var entryId = budgetsData[budgetsData.length-1].id += 1;
        var entryAmount = formFields.amount.val();
        var entryDay = createConsistantDate(formFields.date.val());
        var entryRepeats = formFields.repeats.val();

        // Verify
        if(entryAmount == 0 || entryAmount == "" || entryAmount == null){
            return;
        }

        if(entryDay == "" || entryDay == null){
            return;
        }


        // Sanitize

        // Create object containing the information for a budget entry
        var budgetEntry = getEntryJson(entryId, entryAmount, entryDay, entryRepeats);
        
        // Add new budget entry
        budgetsData.push(budgetEntry);
        
        if(debug){
            console.dir("Entry added to storage.");
        }

        // Draw new budget entry
        appendBudgetLineToTable(budgetEntry.id, budgetEntry.amount, budgetEntry.date, budgetEntry.repeats);
        
        if(debug){
            console.dir("Entry appended in dom.");
        }

        // Reset Form so user can add more
        resetForm();
        
        if(debug){
            console.dir("Form reset and ready for new entry.");
        }
    }

    function getEntryJson(id, amount, date, repeats){
        return {id: id, amount: amount, date: date, repeats: repeats};
    }

    function resetForm(){
        var formFields = getFormFields();
        $.each(formFields, function(){
            this.val("");
        });
    }

    function getFormFields(){
        // Get fields
        var amountField = $('#budgetAmount');
        var dateField = $('#budgetDate');
        var repeatsField = $("input[name='budgetRepeats']:checked");
        var fields = {amount: amountField, date: dateField, repeats: repeatsField}
        return fields;
    }

    function forecastData(budgetData, repetitionClock, repetitionAmount){
        var startingAmount = 0;
        var manipulatedBudgetData = budgetData;
        var amount = 0;
        var forecastedData = [];
        var entriesAdded = 0;

        var repDays = repetitionClock * repetitionAmount;

        /* "Many" calculations will now start incuring */
        for(var months = 1; months <= 12; months++){

            $.each(manipulatedBudgetData, function(item, queue) {
                var rowId = this.id;
                var entryAmount = this.amount;
                var entryDate = this.date;
                var entryRepeats = this.repeats;

                // Calculate the one off's
                if(entryRepeats < 1 && months < 1){
                    amount += entryAmount;
                    entriesAdded++;
                    // Append data to forecasted data 
                    forecastedData.push(getEntryJson(0,entryAmount,entryDate,entryRepeats));
                    
                    if(debug){
                        console.dir("Added to amount: " + entryAmount);
                        console.dir("Removing", manipulatedBudgetData[queue]);
                    }

                    delete manipulatedBudgetData[queue];

                } 
                
                // Calculate every month
                else if(months % entryRepeats === 0){
                    amount += entryAmount;
                    entriesAdded++;
                    // Append data to forecasted data 
                    forecastedData.push(getEntryJson(0,entryAmount,entryDate,entryRepeats));
                    
                    if(debug){
                        console.dir("Added to amount: " + entryAmount);
                    }
                }
            });
        }

                    
        if(debug){
            console.dir(forecastedData);
        }
        return amount;
    }
</script>